import { provideServerRendering } from '@angular/ssr';
import { NgModule } from '@angular/core';
import { AppModule } from './app.module';
import { AppComponent } from './app.component';

// Ensure the server entry uses provideServerRendering() as the single provider registration
export default provideServerRendering();

@NgModule({
  imports: [
    AppModule,
    // Do NOT import ServerModule here when using provideServerRendering()
  ],
  bootstrap: [AppComponent],
})
export class AppServerModule {}

// Example: replace thenable-returning handlers with async/native-Promise handlers

// BEFORE (thenable or custom promise-like)
// router.get('/items/:id', (req, res, next) => {
//   return someService.getItemThenable(req.params.id).then(item => res.json(item)).catch(next);
// });

// AFTER (native Promise / async)
router.get('/items/:id', async (req, res, next) => {
  try {
    const item = await Promise.resolve(someService.getItem(req.params.id));
    res.json(item);
  } catch (err) {
    next(err);
  }
});

// router.param example
router.param('id', async (req, res, next, id) => {
  try {
    req.item = await Promise.resolve(someService.loadItem(id));
    next();
  } catch (err) {
    next(err);
  }
});
